{"version":3,"sources":["types/Filter.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Filter","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","All","filterReducer","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","getTodoInfo","className","map","classNames","id","completed","title","onClick","userId","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoFilter","useState","search","setSearch","dispatch","onSubmit","event","preventDefault","onChange","filterActions","target","value","Active","Completed","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","handleCloseModal","user","setUser","useEffect","getUser","selectedUser","href","email","name","App","setUserId","isLoading","setIsLoading","hasError","setHasError","fetchData","a","data","todosActions","filteredTodos","useMemo","todoList","queryNormalized","trim","toLowerCase","includes","currentTodoActions","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4e60bd1.chunk.js","sourcesContent":["export enum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Filter } from '../types/Filter';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Filter,\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR'\n};\n\nconst setStatus = (payload: Filter): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload,\n});\n\nconst setQuery = (payload: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload,\n});\n\nconst clearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR' });\n\nexport const actions = { setStatus, setQuery, clearQuery };\n\ntype State = {\n  query: string;\n  status: Filter;\n};\n\nconst initialState = { query: '', status: Filter.All };\n\ntype Action = SetStatusAction | SetQueryAction | ClearQueryAction;\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/CLEAR':\n      return { ...state, query: '' };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodos = { type: 'todos/SET', payload: Todos };\n\nconst set = (payload: Todos): AddTodos => ({ type: 'todos/SET', payload });\n\nexport const actions = { set };\n\ntype Todos = Todo[];\ntype Action = AddTodos;\n\nconst todosReducer = (\n  todos: Todos = [],\n  action: Action,\n): Todos => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  currentTodo: Todo | null,\n  getTodoInfo: (id: number, todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  currentTodo,\n  getTodoInfo,\n}) => {\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr\n              key={todo.id}\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': currentTodo?.id === todo.id,\n              })}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => getTodoInfo(todo.userId, todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames('far', {\n                      'fa-eye': currentTodo?.id !== todo.id,\n                      'fa-eye-slash': currentTodo?.id === todo.id,\n                    })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Filter } from '../../types/Filter';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const [search, setSearch] = useState('');\n\n  const dispatch = useAppDispatch();\n  const { status } = useAppSelector(state => state.filter);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Filter));\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(event.target.value);\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleClear = () => {\n    dispatch(filterActions.clearQuery());\n    setSearch('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n            value={status}\n          >\n            <option value={Filter.All}>All</option>\n            <option value={Filter.Active}>Active</option>\n            <option value={Filter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={search}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {search && (\n            <button\n              aria-label=\"none\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  userId: number,\n  handleCloseModal: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ userId, handleCloseModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(selectedUser => setUser(selectedUser));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(user && currentTodo)\n        ? (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo.id}`}\n              </div>\n\n              <button\n                aria-label=\"none\"\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={handleCloseModal}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo.completed\n                  ? (<strong className=\"has-text-danger\">Planned</strong>)\n                  : (<strong className=\"has-text-success\">Done</strong>)}\n\n                {' by '}\n                <a href={`mailto:${user?.email}`}>{user?.name}</a>\n              </p>\n            </div>\n          </div>\n        ) : (<Loader />)}\n    </div>\n  );\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { actions as currentTodoActions } from './features/currentTodo';\nimport { Filter } from './types/Filter';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchData = async () => {\n      try {\n        const data: Todo[] = await getTodos();\n\n        dispatch(todosActions.set(data));\n      } catch (err) {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    let todoList = [...todos];\n\n    todoList = todoList.filter(todo => {\n      switch (status) {\n        case Filter.Completed:\n          return todo.completed;\n\n        case Filter.Active:\n          return !todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n\n    const queryNormalized = query.trim().toLowerCase() || '';\n\n    if (queryNormalized) {\n      todoList = todoList.filter(todo => (\n        todo.title.toLowerCase().includes(queryNormalized)\n      ));\n    }\n\n    return todoList;\n  }, [todos, status, query]);\n\n  const getTodoInfo = (id: number, todo: Todo) => {\n    setUserId(id);\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const handleCloseModal = () => {\n    setUserId(0);\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {isLoading\n              ? (<Loader />)\n              : (\n                <div className=\"block\">\n                  <TodoList\n                    todos={filteredTodos}\n                    currentTodo={currentTodo}\n                    getTodoInfo={getTodoInfo}\n                  />\n                </div>\n              )}\n\n            {hasError && (\n              <p className=\"notification is-warning\">\n                There are no todos on server\n              </p>\n            )}\n\n            {!filteredTodos.length && query && (\n              <p className=\"notification is-warning\">\n                There are no todos matching current filter criteria\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          userId={userId}\n          handleCloseModal={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}